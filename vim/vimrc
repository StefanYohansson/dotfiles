set nocompatible
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-dispatch'
Plugin 'tpope/vim-projectionist'
Plugin 'tpope/vim-fugitive'
Plugin 'powerline/fonts'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'edkolev/promptline.vim'
Plugin 'phildawes/racer'
Plugin 'rust-lang/rust.vim'
Plugin 'majutsushi/tagbar'
Plugin 'bling/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'bling/vim-bufferline'
Plugin 'timonv/vim-cargo'
Plugin 'skwp/vim-easymotion'
Plugin 'pangloss/vim-javascript'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'tpope/vim-markdown'
Plugin 'jlfwong/vim-mercenary'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'unterzicht/vim-virtualenv'
Plugin 'noahfrederick/vim-composer'
Plugin 'noahfrederick/vim-laravel'
Plugin 'jwalton512/vim-blade'
Plugin 'stanangeloff/php.vim'
Plugin 'wakatime/vim-wakatime'
Plugin 'junegunn/fzf'
Plugin 'leafgarland/typescript-vim'
Plugin 'nvie/vim-flake8'
Plugin 'davidhalter/jedi'
Plugin 'davidhalter/jedi-vim'
Plugin 'lepture/vim-jinja'

call vundle#end()
filetype plugin indent on

"""
"""""
""""""" non plugin things
"""""
"""
" set values for vim configs
"set number
set ruler
set showcmd
set autoindent
set cursorline
set nocursorcolumn
set nocursorline
set laststatus=2
set hidden
set background=dark
set autoread
set t_Co=16
set formatoptions=1
set lbr
set linebreak
set wrap
set modeline
set modelines=5

syntax sync minlines=256
syntax enable
colorscheme default
colors delek

"let values
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'
let g:racer_cmd = "~/.cargo/bin/racer"
let $RUST_SRC_PATH="~/.rsvm/current/src/rustc-source/src"
let g:racer_experimental_completer = 1
let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let mapleader = ","
let g:solarized_termcolors=256
let g:solarized_termtrans=1
let g:airline_theme='sol'

"general maps
nmap <leader>t :tabnew<cr>
nmap <leader>ne :NERDTree<cr>
nmap <leader>nc :NERDTreeClose<cr>
nmap <F8> :TagbarToggle<CR>
nmap <C-]> :NERDTreeToggle<CR>
nmap <C-e> :vsplit<CR>
nmap <C-g> :split<CR>
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k
nmap <C-l> <C-w>l

"indentation config based on file type
filetype plugin indent on
autocmd Filetype php setlocal sts=4 sw=4 expandtab
autocmd Filetype blade setlocal sts=2 sw=2 expandtab
autocmd Filetype perl setlocal sts=4 sw=4 expandtab
autocmd Filetype sh setlocal sts=2 sw=2 expandtab
autocmd Filetype javascript setlocal sts=2 sw=2 expandtab
autocmd Filetype typescript setlocal sts=2 sw=2 expandtab
autocmd Filetype css setlocal sts=2 sw=2 expandtab
autocmd Filetype sql setlocal sts=2 sw=2 expandtab
autocmd Filetype lua setlocal sts=2 sw=2 expandtab
autocmd Filetype haskell setlocal sts=2 sw=2 expandtab
autocmd Filetype scss setlocal sts=2 sw=2 expandtab
autocmd Filetype html setlocal sts=2 sw=2 expandtab
autocmd Filetype python setlocal sts=4 sw=4 expandtab
autocmd Filetype c setlocal sts=4 sw=4 expandtab
autocmd Filetype cpp setlocal sts=4 sw=4 expandtab
autocmd Filetype ruby setlocal sts=2 sw=2 expandtab
autocmd Filetype vcl setlocal sts=4 sw=4 expandtab
autocmd Filetype json setlocal sts=4 sw=4 expandtab
autocmd Filetype erb setlocal sts=4 sw=4 expandtab
au BufNewFile,BufRead *.md,*.markdown setlocal filetype=ghmarkdown


" COLORS {
" syntax highlighting groups
hi Comment      ctermfg=7
"	hi Constant     ctermfg=15 
"	hi Identifier   ctermfg=4
"	hi Statement    ctermfg=8
"	hi PreProc      ctermfg=6
"	hi Type         ctermfg=1
"	hi Special      ctermfg=3
"	hi Underlined   ctermfg=7
"	hi Ignore       ctermfg=9
"	hi Error        ctermfg=11
"	hi Todo         ctermfg=1
"	hi Normal ctermfg=none ctermbg=none
"	hi NonText ctermfg=0 ctermbg=none
"	hi Directory	ctermfg=12

hi VertSplit	ctermfg=0 ctermbg=none
hi StatusLine	ctermfg=0 ctermbg=none
hi StatusLineNC	ctermfg=0 ctermbg=none

hi Folded ctermbg=0 ctermfg=8

hi Pmenu ctermfg=7 ctermbg=0
hi PmenuSel ctermfg=0 ctermbg=15
hi LineNr ctermfg=0 ctermbg=none
hi CursorLine ctermfg=none ctermbg=none cterm=none
hi CursorLineNr ctermfg=none ctermbg=0 
hi CursorColumn ctermfg=none ctermbg=0
" Syntax checker colors
highlight SignColumn ctermbg=none
hi SyntasticErrorSign ctermfg=1 ctermbg=none
hi SyntasticWarningSign ctermfg=3 ctermbg=none
hi SyntasticStyleErrorSign ctermfg=1 ctermbg=none
hi SyntasticStyleWarningSign ctermfg=3 ctermbg=none
hi SyntasticErrorLine ctermfg=none ctermbg=none
hi SyntasticWarningLine ctermfg=none ctermbg=none
hi SyntasticStyleErrorLine ctermfg=none ctermbg=none
hi SyntasticStyleWarningLine ctermfg=none ctermbg=none
hi SpellBad ctermfg=0 ctermbg=3
hi SpellCap ctermfg=0 ctermbg=1

"}

"
""
"""""
"""""" PLUGINS CONFIGS
""""
""
"

" NERDTREE
let NERDChristmasTree = 1
let NERDTreeHighlightCursorline = 1

" VDEBUG
let g:vdebug_features = {'max_depth':2048}
let g:vdebug_options= {
			\	"continuous_mode": 1,
			\	"debug_window_level": 2,
			\	"debug_file_level": 2,
			\	"debug_file":"~/vdebug.log"
			\}

" AIRLINE 
let g:airline_symbols = {}
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
" Fancy powerline symbols, needs a patched/edited font
let g:Powerline_symbols = 'fancy'
"
" " Use # to indicate branches
let g:Powerline_symbols_override = {
			\ 'BRANCH': [0x2213],
			\ }
au BufRead,BufNewFile *.todo setfiletype todo


cabbr wp call Wp()
fun! Wp()
	set formatoptions=1
	set lbr
	set linebreak
	set wrap
	set nonumber
	nnoremap j gj
	nnoremap k gk
	nnoremap 0 g0
	nnoremap $ g$
	set comments=s1:/*,mb:*,ex:*/,://,b:#,:%,:XCOMM,n:>,fb:-,fb:[+],fb:[x],fb:[-]
	set comments +=fb:-
	set spell spelllang=en_us

endfu

" Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
			\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
			\gvy/<C-R><C-R>=substitute(
			\escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
			\gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
			\let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
			\gvy?<C-R><C-R>=substitute(
			\escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
			\gV:call setreg('"', old_reg, old_regtype)<CR>
"}


if executable('fzf')
 " FZF {{{
 
 " <C-p> or <C-t> to search files
 nnoremap <silent> <C-t> :FZF -m<cr>
 nnoremap <silent> <C-p> :FZF -m<cr>

 " <M-p> for open buffers
 nnoremap <silent> <M-p> :Buffers<cr>

 " <M-S-p> for MRU
 nnoremap <silent> <M-S-p> :History<cr>

 " Use fuzzy completion relative filepaths across directory
 imap <expr> <c-x><c-f> fzf#vim#complete#path('git ls-files $(git rev-parse --show-toplevel)')

 " Better command history with q:
 command! CmdHist call fzf#vim#command_history({'right': '40'})
 nnoremap q: :CmdHist<CR>

 " Better search history
 command! QHist call fzf#vim#search_history({'right': '40'})
 nnoremap q/ :QHist<CR>

 command! -bang -nargs=* Ack call fzf#vim#ag(<q-args>, {'down': '40%', 'options': --no-color'})
 " }}}
else
 " CtrlP fallback
 Plugin 'ctrlpvim/ctrlp.vim'
end
